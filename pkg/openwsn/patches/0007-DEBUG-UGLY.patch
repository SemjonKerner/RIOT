From 0995d9108b1ab8f97029dcfcea4a670a17f05dde Mon Sep 17 00:00:00 2001
From: PeterKietzmann <peter.kietzmann@haw-hamburg.de>
Date: Thu, 18 Apr 2019 11:46:35 +0200
Subject: [PATCH] DEBUG UGLY

---
 kernel/openos/scheduler.c          | 27 +++++++++++++++++----------
 openstack/02b-MAChigh/neighbors.c  |  4 +++-
 openstack/02b-MAChigh/sixtop.c     |  8 ++++++++
 openstack/03b-IPv6/icmpv6rpl.c     |  2 ++
 openstack/cross-layers/openqueue.c |  1 +
 openstack/openstack.c              |  2 +-
 6 files changed, 32 insertions(+), 12 deletions(-)

diff --git a/kernel/openos/scheduler.c b/kernel/openos/scheduler.c
index ed30afae..aeccdcb7 100644
--- a/kernel/openos/scheduler.c
+++ b/kernel/openos/scheduler.c
@@ -37,15 +37,15 @@ void scheduler_init(void) {
 void scheduler_start(void) {
    taskList_item_t* pThisTask;
 
-   msg_t msg;
-   msg_t msg_queue[8];
+   //msg_t msg;
+   //msg_t msg_queue[8];
    /* initialize message queue */
-   msg_init_queue(msg_queue, 8);
+   //msg_init_queue(msg_queue, 8);
 
    openwsn_sched_pid = thread_getpid();
 
    while (1) {
-      if(msg.type == OW_SCHED_MSG_TYPE_EVENT) {
+      //if(msg.type == OW_SCHED_MSG_TYPE_EVENT) {
          while(scheduler_vars.task_list!=NULL) {
             // there is still at least one task in the linked-list of tasks
 
@@ -59,7 +59,6 @@ void scheduler_start(void) {
             scheduler_vars.task_list = pThisTask->next;
 
             ENABLE_INTERRUPTS();
-
             // execute the current task
             pThisTask->cb();
 
@@ -69,10 +68,11 @@ void scheduler_start(void) {
             pThisTask->next          = NULL;
             scheduler_dbg.numTasksCur--;
          }
-      }
+      //}
       debugpins_task_clr();
       board_sleep();
-      msg_receive(&msg);
+      //msg_receive(&msg);
+      thread_flags_wait_any(OW_SCHED_MSG_TYPE_EVENT);
       debugpins_task_set();                      // IAR should halt here if nothing to do
    }
 }
@@ -92,6 +92,8 @@ void scheduler_start(void) {
    }
    if (taskContainer>&scheduler_vars.taskBuf[TASK_LIST_DEPTH-1]) {
       // task list has overflown. This should never happpen!
+      puts("SCHEDULER TASK LIST OVERFLOW");
+      //msg_queue_print();
    
       // we can not print from within the kernel. Instead:
       // blink the error LED
@@ -120,9 +122,14 @@ void scheduler_start(void) {
    
    ENABLE_INTERRUPTS();
 
-   msg_t msg;
-   msg.type = OW_SCHED_MSG_TYPE_EVENT;
-   msg_send(&msg, openwsn_sched_pid);
+   //msg_t msg;
+   //msg.type = OW_SCHED_MSG_TYPE_EVENT;
+   // int ret = msg_send(&msg, openwsn_sched_pid);
+   // if(ret < 1) {
+   //    printf("error sending msg. ret=%i\n", ret);
+   // }
+   thread_t *thread = (thread_t*) thread_get(openwsn_sched_pid);
+   thread_flags_set(thread, OW_SCHED_MSG_TYPE_EVENT);
 }
 
 //=========================== private =========================================
diff --git a/openstack/02b-MAChigh/neighbors.c b/openstack/02b-MAChigh/neighbors.c
index d17c8eb0..6e8b5fb1 100644
--- a/openstack/02b-MAChigh/neighbors.c
+++ b/openstack/02b-MAChigh/neighbors.c
@@ -10,7 +10,7 @@
 
 //=========================== variables =======================================
 
-static neighbors_vars_t neighbors_vars;
+neighbors_vars_t neighbors_vars;
 
 //=========================== prototypes ======================================
 
@@ -652,6 +652,7 @@ void registerNewNeighbor(open_addr_t* address,
                          bool         joinPrioPresent,
                          uint8_t      joinPrio,
                          bool         insecure) {
+   puts("registerNewNeighbor");
    uint8_t  i;
    // filter errors
    if (address->type!=ADDR_64B) {
@@ -714,6 +715,7 @@ bool isNeighbor(open_addr_t* neighbor) {
 }
 
 void removeNeighbor(uint8_t neighborIndex) {
+  puts("removeNeighbor");
    neighbors_vars.neighbors[neighborIndex].used                      = FALSE;
    neighbors_vars.neighbors[neighborIndex].parentPreference          = 0;
    neighbors_vars.neighbors[neighborIndex].stableNeighbor            = FALSE;
diff --git a/openstack/02b-MAChigh/sixtop.c b/openstack/02b-MAChigh/sixtop.c
index 021b353c..265da49d 100644
--- a/openstack/02b-MAChigh/sixtop.c
+++ b/openstack/02b-MAChigh/sixtop.c
@@ -708,6 +708,8 @@ This is one of the MAC management tasks. This function inlines in the
 timers_res_fired() function, but is declared as a separate function for better
 readability of the code.
 */
+#include "openqueue.h"
+extern openqueue_vars_t openqueue_vars;
 port_INLINE void sixtop_sendEB(void) {
     OpenQueueEntry_t* eb;
     uint8_t     i;
@@ -759,6 +761,12 @@ port_INLINE void sixtop_sendEB(void) {
    
     if (sixtop_vars.busySendingEB==TRUE) {
         // don't continue if I'm still sending a previous EB
+        puts("EB err still sending previos");
+        for (uint8_t i = 0; i < QUEUELENGTH; i++) {
+          printf("Creator: 0x%2x, ", openqueue_vars.queue[i].creator);
+          printf("Owner: 0x%2x\n", openqueue_vars.queue[i].owner);
+        }
+        __BKPT(1);
         return;
     }
     
diff --git a/openstack/03b-IPv6/icmpv6rpl.c b/openstack/03b-IPv6/icmpv6rpl.c
index 4dcc7075..bc41721b 100644
--- a/openstack/03b-IPv6/icmpv6rpl.c
+++ b/openstack/03b-IPv6/icmpv6rpl.c
@@ -453,6 +453,7 @@ void icmpv6rpl_updateMyDAGrankAndParentSelection(void) {
     }
    
     if (foundBetterParent) {
+        puts("foundBetterParent");
         icmpv6rpl_vars.haveParent=TRUE;
         if (!prevHadParent) {
             // in case preParent is killed before calling this function, clear the preferredParent flag
@@ -591,6 +592,7 @@ void icmpv6rpl_indicateRxDIO(OpenQueueEntry_t* msg) {
 }
 
 void icmpv6rpl_killPreferredParent(void) {
+  printf("icmpv6rpl_killPreferredParent\n");
     icmpv6rpl_vars.haveParent=FALSE;
     if (idmanager_getIsDAGroot()==TRUE) {
        icmpv6rpl_vars.myDAGrank=MINHOPRANKINCREASE;
diff --git a/openstack/cross-layers/openqueue.c b/openstack/cross-layers/openqueue.c
index 3a01f423..bc56d426 100644
--- a/openstack/cross-layers/openqueue.c
+++ b/openstack/cross-layers/openqueue.c
@@ -127,6 +127,7 @@ owerror_t openqueue_freePacketBuffer(OpenQueueEntry_t* pkt) {
                          (errorparameter_t)0,
                          (errorparameter_t)0);
    ENABLE_INTERRUPTS();
+   puts("QUEUE IS FULL");
    return E_FAIL;
 }
 
diff --git a/openstack/openstack.c b/openstack/openstack.c
index edeaf28c..b30d1971 100644
--- a/openstack/openstack.c
+++ b/openstack/openstack.c
@@ -64,7 +64,7 @@ void openstack_init(void) {
    neighbors_init();
    msf_init();
    //-- 03a-IPHC
-   openbridge_init();
+   //openbridge_init();
    iphc_init();
    //-- 03b-IPv6
    forwarding_init();
-- 
2.17.1

